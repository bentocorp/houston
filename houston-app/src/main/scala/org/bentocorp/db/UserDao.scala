package org.bentocorp.db

import org.slf4j.LoggerFactory
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Component

import slick.driver.MySQLDriver.simple._
import slick.lifted.Tag

class TUser(tag: Tag) extends Table[(Long, Option[String], Option[String], Option[String], Option[String],
  Option[String], Option[String])](tag, "User") {
  def pk_User = column[Long]("pk_User", O.PrimaryKey, O.AutoInc)
  def email = column[Option[String]]("email")
  def firstname = column[Option[String]]("firstname")
  def lastname = column[Option[String]]("lastname")
  def phone = column[Option[String]]("phone")
  def password = column[Option[String]]("password")
  def api_token = column[Option[String]]("api_token")
  def * = (pk_User, email, firstname, lastname, phone, password, api_token)
}

@Component
class UserDao extends IAuthDao {

  final val logger = LoggerFactory.getLogger(classOf[UserDao])

  @Autowired
  var database: Database = null


  val users = TableQuery[TUser]

  def getAuthenticationCredentials(username: String): (String, String) = database() withSession { implicit session =>
    val res = users.filter(_.email === username).map(_.api_token).list.head
    (res.get, res.get)
  }

  def getTokenByPrimaryKey(primaryKey: Long): Option[String] = database() withSession { implicit session =>
    val resultSet = users.filter(_.pk_User === primaryKey).map(_.api_token).list
    if (resultSet.nonEmpty) {
      // Note that access token format generated by PHP back-end does not match Node
      resultSet.head match {
        case Some(token) => Some("c-" + primaryKey + "-0-" + token)
        case _ => None
      }
    } else {
      logger.error("Error - no token rows returned for primary key " + primaryKey)
      None
    }
  }
}
